use once_cell::sync::Lazy;
use std::sync::atomic::{AtomicUsize, Ordering};
use std::sync::Arc;

static GLOBAL_STATISTICS: Lazy<Arc<Statistics>> = Lazy::new(|| Arc::new(Statistics::default()));

/// CacheStatistics holds statistics generated by Client Side Caching.
#[derive(Debug)]
pub struct CacheStatistics {
    /// Count of how many cache hits occurred.
    pub hit: usize,
    /// Count of how many cache misses occurred.
    pub miss: usize,
    /// Count of how many cache item is invalidated via [`crate::types::PushKind::Invalidate`] or LRU.
    pub invalidate: usize,
    /// Count of commands sent when caching is enabled, only increased when key is cached.
    pub sent_command_count: usize,
}
#[derive(Default)]
pub(crate) struct Statistics {
    hit: AtomicUsize,
    miss: AtomicUsize,
    invalidate: AtomicUsize,
    sent_command_count: AtomicUsize,
}

impl Statistics {
    pub(crate) fn increase_hit(&self, val: usize) {
        self.hit.fetch_add(val, Ordering::Relaxed);
        GLOBAL_STATISTICS.hit.fetch_add(val, Ordering::Relaxed);
    }
    pub(crate) fn increase_miss(&self, val: usize) {
        self.miss.fetch_add(val, Ordering::Relaxed);
        GLOBAL_STATISTICS.miss.fetch_add(val, Ordering::Relaxed);
    }
    pub(crate) fn increase_invalidate(&self, val: usize) {
        self.invalidate.fetch_add(val, Ordering::Relaxed);
        GLOBAL_STATISTICS
            .invalidate
            .fetch_add(val, Ordering::Relaxed);
    }

    pub(crate) fn increase_sent_command_count(&self, val: usize) {
        self.sent_command_count.fetch_add(val, Ordering::Relaxed);
        GLOBAL_STATISTICS
            .sent_command_count
            .fetch_add(val, Ordering::Relaxed);
    }
}

impl From<Arc<Statistics>> for CacheStatistics {
    fn from(value: Arc<Statistics>) -> Self {
        CacheStatistics {
            hit: value.hit.load(Ordering::Relaxed),
            miss: value.miss.load(Ordering::Relaxed),
            invalidate: value.invalidate.load(Ordering::Relaxed),
            sent_command_count: value.sent_command_count.load(Ordering::Relaxed),
        }
    }
}

/// Gets global [`CacheStatistics`]
/// Every [`crate::aio::MultiplexedConnection`] and [`crate::cluster_async::ClusterConnection`]'s local cache statistics will also affect here.
pub fn get_global_statistics() -> CacheStatistics {
    GLOBAL_STATISTICS.clone().into()
}

/// Resets global statistics.
pub fn reset_global_statistics() {
    GLOBAL_STATISTICS.hit.swap(0, Ordering::Relaxed);
    GLOBAL_STATISTICS.miss.swap(0, Ordering::Relaxed);
    GLOBAL_STATISTICS.invalidate.swap(0, Ordering::Relaxed);
    GLOBAL_STATISTICS
        .sent_command_count
        .swap(0, Ordering::Relaxed);
}
